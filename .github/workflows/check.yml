name: Check code on pull requests & subsequent pushes

on:
  pull_request:
    branches:
      - staging
      - production

jobs:
  tests:
    name: run tests
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version-file: ".python-version"
          cache: "pip"
          cache-dependency-path: "**/setup.cfg"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[pdf,picture]
      - name: Start LocalStack
        env:
          LOCALSTACK_S3_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: |
          # install LocalStack cli and awslocal
          pip install localstack awscli-local
          # Make sure to pull the latest version of the image
          docker pull localstack/localstack
          # Start LocalStack in the background
          localstack start -d
          # Wait 30 seconds for the LocalStack container to become ready before timing out
          echo "Waiting for LocalStack startup..."
          localstack wait -t 30
          echo "Startup complete"
      - name: Test
        env:
          LOCALSTACK_S3_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: python -m unittest discover -s tests 2>&1 | tee test-report.txt
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-report.txt
          retention-days: 5
  lint_and_scan:
    name: run linting and sonarqube scan
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      - uses: actions/setup-python@v4
        with:
          python-version-file: ".python-version"
          cache: "pip"
          cache-dependency-path: "**/setup.cfg"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[pdf,picture]
          pip install pylint
      - name: lint
        run: pylint --output=lint-report.txt --output-format=parseable ./src
      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.2.0
        with:
          host: ${{ secrets.SONAR_HOST }}
          login: ${{ secrets.SONAR_TOKEN }}
          projectKey: ${{ secrets.SONAR_PROJECTKEY }}
      - name: Archive lint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-results
          path: lint-report.txt
          retention-days: 5
